@using Microsoft.AspNetCore.Components.Web
@using StudioGhibili.Models
@using StudioGhibili.Services
@inject JsonCharacterService CharacterService

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<div class="card-columns colored">


    @foreach (var character in CharacterService.GetCharacters())
    {
        <div class="card">
            <div class="card-body">
                <h3 class="card-title" style="color:cornflowerblue; font-family:Arial, Helvetica, sans-serif; font-weight:bolder;">@character.name&nbsp;</h3>
                <div class="card-text">
                    <h5>From Movie: <span style="font-style: italic">@character.movie&nbsp;@character.year</span></h5>
                    <br />
                    <h6>@character.descripition&nbsp;</h6>
                </div>
            </div>
            <div class="card-img" style="background-image: url('@character.image'); height: 250px; "></div><br />

            <button @onfocus="(e => SelectCharacter(character.name))"
                    data-toggle="modal" data-target="#characterModal" class="btn btn-primary">
                More Info.
            </button>

        </div>


    }
</div>
<!-- Add Modal -->
@if (selectCharacter != null)
{
    <div class="modal fade" id="characterModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectCharacter.name</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectCharacter.image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectCharacter.descripition</p>
                        </div>
                    </div>
                    <br />
                    <div class="card-text">Rate by click the last star specifies no. of stars you want to give :)</div>
                </div>
                <!-- The Starts of Rating -->
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {

                        <span>@voteCount @voteLable</span>
                    }

                    <!-- this for loop used to draw the current stars, also add to each star an indicator "currentStars" that specifies the rating
                         also adds to each star a Click listener (wheather the star is lit or black) to send that indicator "or rating" by SubmitRating -->
                    @for (int i = 1; i < 6; i++)
                    {
                        // to give every star a specific number of rating used to vote
                        var currentStars = i;
                        if (i <= currentRatingAvg)
                        {
                            <span class="fa-star fa checked" @onclick="(e => SubmitRating(currentStars))"> </span>
                        }
                        else
                        {
                            <span class="fa-star fa" @onclick="(e => SubmitRating(currentStars))"> </span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    Character selectCharacter;
    string selectCharacterName;

    // Called when button is clicked
    void SelectCharacter(string name)
    {
        selectCharacterName = name;
        selectCharacter = CharacterService.GetCharacters().First(x => x.name == name);
        //Get the current rating whenever the character is selected
        GetCurrentRating();
    }
    // ADD Ratings Section

    // Notice that these vars are outside the func so we can use them everywhere here, global vars ;)
    int currentRatingAvg = 0;
    int voteCount = 0;
    string voteLable;

    // this func will calculate the currentRatingAvg which used to draw the stars *** ;)
    void GetCurrentRating()
    {
        if(selectCharacter.Ratings == null)
        {
            currentRatingAvg = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectCharacter.Ratings.Count();
            voteLable = voteCount > 1 ? "Votes" : "Vote";
            currentRatingAvg = selectCharacter.Ratings.Sum() / voteCount;
            // you can take the average directly from C# linq withnot need to manually calculate it
            // SelectedCharacter.Ratings.Average();
        }

        System.Console.WriteLine($"Current Rating for {selectCharacter.name}: {currentRatingAvg}");
    }

    // this function gets called when a star is clicked, each star has a number (currentStars) indicating the rating and passed to this func
    void SubmitRating(int rating)
    {
        // cheesy test 
        System.Console.WriteLine($"Rating received for {selectCharacterName}: {rating}");

        // it's that function we used to pass its para by url queries, but now from here ;)
        CharacterService.AddRatings(selectCharacterName, rating);

        // this func that get called when button clicked, but we called again here to reflect the updates 
        // show the updated character obj along with the new rating
        SelectCharacter(selectCharacterName);
    }
}
